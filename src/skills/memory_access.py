from config import Config
from skills.base_skill import BaseSkill

class MemorySkill(BaseSkill):
    """Permet √† l'agent d'acc√©der √† la m√©moire partag√©e."""


    def __init__(self, agent):
        super().__init__(agent)

    def perform(self, prompt, **kwargs):
        """Envoie une requ√™te au LLM configur√© dans `Config`."""
        Config.debug_log(f"ü§ñ {self.agent.name} interroge le LLM avec : {prompt}")

        try:
            response = Config.query_llm(prompt, **kwargs)
            if not response or not isinstance(response, str):
                raise ValueError("R√©ponse LLM invalide")
            
            Config.debug_log(f"üì® R√©ponse du LLM : {response}")
            return response
        
        except Exception as e:
            Config.debug_log(f"‚ùå Erreur lors de la requ√™te LLM : {e}")
            return None  # Pour √©viter les crashs et permettre une gestion propre
    def perform(self, action: str, *args, **kwargs):
        """Choisit l‚Äôaction m√©moire en fonction de la commande re√ßue."""
        actions = {
            "store": self.store_memory,
            "retrieve": self.retrieve_memory,
            "forget": self.forget_memory
        }
        if action in actions:
            return actions[action](*args, **kwargs)
        else:
            Config.debug_log(f"‚ùå Action m√©moire inconnue : {action}")

    def store_memory(self, key: str, value: str):
        """Stocke une donn√©e en m√©moire."""
        Config.update_memory(self.agent.name, key, value)
        Config.debug_log(f"üß† {self.agent.name} a m√©moris√© {key} : {value}")

    def retrieve_memory(self, key: str):
        """R√©cup√®re une donn√©e en m√©moire."""
        value = Config.retrieve_memory(self.agent.name, key)
        if value is None:
            Config.debug_log(f"‚ö†Ô∏è {self.agent.name} n'a aucune m√©moire pour {key}")
        else:
            Config.debug_log(f"üîç {self.agent.name} r√©cup√®re {key} : {value}")
        return value

    def forget_memory(self, key: str):
        """Efface une m√©moire sp√©cifique uniquement si elle existe."""
        if Config.retrieve_memory(self.agent.name, key) is not None:
            Config.update_memory(self.agent.name, key, None)
            Config.debug_log(f"üöÆ {self.agent.name} a oubli√© {key}")
        else:
            Config.debug_log(f"‚ö†Ô∏è {self.agent.name} ne pouvait pas oublier {key} (non existant)")
